/*
 * Copyright (c) 2022 LG Electronics Inc.
 * SPDX-License-Identifier: Apache-2.0
 */

#include <aif/base/AIVision.h>
#include <aif/base/DetectorFactory.h>
#include <aif/base/Detector.h>
#include <aif/base/Descriptor.h>
#include <aif/bodyPoseEstimation/pose3d/Pose3dDescriptor.h>
#include <aif/tools/Utils.h>
#include <aif/log/Logger.h>

#include <opencv2/opencv.hpp>
#include <opencv2/imgproc.hpp>

#include <gtest/gtest.h>
#include <iostream>
#include <fstream>

using namespace aif;

class Pose3dDetectorTest : public ::testing::Test
{
protected:
    Pose3dDetectorTest() = default;
    ~Pose3dDetectorTest() = default;

    static void SetUpTestCase()
    {
        AIVision::init();
    }

    static void TearDownTestCase()
    {
        AIVision::deinit();
    }


    void SetUp() override
    {
        DetectorFactory::get().clear();
        basePath = AIVision::getBasePath();
    }

    void TearDown() override
    {
    }

    std::string basePath;
    std::string use_npu_delegate {
        "{"
        "  \"delegates\" : ["
        "    {"
        "      \"name\": \"npu_delegate\","
        "      \"option\": {"
        "       }"
        "    }"
        "  ]"
        "}"};


    std::string use_npu_delegate_and_people {
        "{"
        "  \"delegates\" : ["
        "    {"
        "      \"name\": \"npu_delegate\","
        "      \"option\": {"
        "       }"
        "    }"
        "  ],"
        "  \"commonParam\" : {"
        "    \"numMaxPerson\": 5"
        "  }"
        "}"};

    std::vector<std::vector<float>> joints2d_arr;

    void test_arr_init() {
        joints2d_arr.push_back({290, 236, 275, 236, 275, 290, 275, 350, 305, 236, 305, 295, 305, 350, 290, 181, 290, 136, 290, 116, 290, 81, 320, 146, 330, 186,
                        305, 221, 260, 146, 245, 186, 280, 201, 290, 221, 290, 186, 290, 166, 290, 131, 300, 196, 300, 201, 300, 201, 300, 206, 295, 206,
                        285, 231, 285, 236, 285, 236, 290, 236, 295, 236, 270, 375, 265, 370, 305, 375, 315, 370, 285, 101, 295, 101, 275, 106, 305, 106, 290, 196, 295, 231 });
        joints2d_arr.push_back({288, 231, 273, 236, 273, 294, 278, 348, 307, 236, 302, 294, 302, 348, 288, 177, 292, 132, 292, 118, 292, 83, 322, 147, 332, 186,
                        297, 216, 263, 142, 248, 186, 288, 191, 288, 221, 292, 186, 288, 162, 292, 128, 307, 186, 307, 191, 307, 191, 307, 196, 302, 196,
                        278, 221, 278, 226, 278, 226, 283, 231, 288, 231, 268, 373, 263, 368, 307, 378, 312, 373, 283, 103, 297, 103, 278, 108, 307, 108, 297, 186, 292, 221 });
        joints2d_arr.push_back({290, 235, 275, 235, 275, 293, 275, 352, 309, 235, 304, 293, 304, 352, 290, 176, 290, 136, 290, 117, 294, 82, 319, 146, 324, 190,
                        294, 210, 260, 146, 250, 181, 294, 185, 290, 220, 290, 190, 290, 161, 290, 131, 314, 181, 314, 181, 314, 185, 309, 190, 309, 190,
                        275, 215, 275, 215, 275, 220, 280, 225, 280, 225, 270, 372, 260, 372, 309, 377, 314, 372, 285, 102, 294, 102, 280, 107, 304, 107, 304, 181, 285, 215});
        joints2d_arr.push_back({290, 235, 271, 235, 275, 293, 275, 351, 305, 235, 305, 293, 300, 351, 290, 176, 290, 133, 290, 118, 295, 84, 319, 147, 324, 186,
                        290, 201, 261, 142, 251, 181, 295, 186, 290, 220, 290, 191, 290, 162, 290, 128, 314, 176, 319, 172, 319, 176, 319, 176, 314, 181,
                        271, 201, 271, 205, 271, 205, 271, 210, 275, 210, 271, 375, 261, 370, 305, 375, 314, 370, 280, 104, 295, 104, 275, 109, 305, 109, 309, 176, 275, 205});
        joints2d_arr.push_back({287, 235, 272, 235, 277, 291, 277, 352, 308, 235, 303, 296, 303, 352, 293, 178, 293, 133, 293, 117, 293, 87, 318, 143, 328, 184,
                        282, 194, 262, 143, 252, 178, 298, 184, 287, 219, 293, 194, 287, 163, 293, 128, 318, 168, 323, 168, 323, 168, 323, 173, 272, 194,
                        267, 189, 267, 194, 267, 194, 272, 199, 272, 199, 267, 377, 262, 372, 308, 372, 313, 372, 282, 102, 293, 102, 277, 107, 308, 107, 272, 189, 277, 194});
        joints2d_arr.push_back({291, 233, 272, 233, 277, 291, 277, 349, 305, 233, 305, 296, 301, 349, 291, 180, 291, 132, 291, 117, 291, 83, 320, 146, 320, 185,
                        281, 185, 262, 141, 257, 180, 301, 180, 291, 219, 291, 190, 291, 161, 291, 127, 320, 165, 325, 165, 325, 170, 325, 170, 272, 194,
                        262, 180, 262, 180, 262, 185, 262, 185, 267, 190, 267, 373, 262, 368, 305, 373, 315, 373, 281, 103, 296, 103, 277, 107, 305, 107, 310, 170, 272, 180});
        joints2d_arr.push_back({292, 229, 271, 234, 276, 295, 276, 351, 307, 234, 307, 295, 302, 351, 292, 178, 292, 132, 292, 117, 292, 87, 322, 143, 322, 183,
                        281, 178, 261, 143, 256, 178, 307, 178, 286, 219, 292, 193, 292, 163, 292, 127, 317, 163, 322, 163, 322, 168, 322, 168, 322, 173,
                        261, 173, 261, 173, 261, 178, 261, 178, 266, 183, 266, 376, 261, 371, 307, 371, 312, 371, 281, 102, 292, 102, 276, 107, 307, 107, 312, 168, 271, 178});
        joints2d_arr.push_back({292, 229, 271, 229, 276, 291, 276, 352, 307, 235, 302, 296, 302, 352, 292, 178, 292, 133, 292, 117, 292, 87, 322, 143, 322, 178,
                        281, 173, 266, 143, 256, 173, 271, 173, 286, 219, 292, 189, 292, 163, 292, 128, 276, 173, 327, 158, 276, 173, 271, 173, 271, 178,
                        266, 168, 261, 168, 261, 173, 266, 173, 266, 173, 266, 372, 261, 372, 307, 372, 312, 372, 281, 102, 292, 102, 276, 107, 307, 107, 271, 173, 271, 168});
        joints2d_arr.push_back({287, 229, 272, 235, 277, 295, 277, 351, 302, 235, 302, 295, 302, 351, 292, 179, 292, 133, 292, 118, 292, 83, 322, 143, 322, 179,
                        282, 169, 267, 143, 257, 179, 262, 174, 292, 219, 292, 189, 292, 164, 292, 128, 272, 164, 272, 164, 272, 169, 272, 174, 272, 174,
                        262, 164, 262, 164, 262, 169, 267, 174, 267, 174, 267, 376, 262, 371, 307, 371, 312, 371, 282, 103, 297, 103, 277, 108, 307, 108, 267, 169, 272, 169});
        joints2d_arr.push_back({288, 228, 273, 234, 273, 294, 278, 350, 303, 234, 303, 294, 303, 350, 288, 178, 293, 132, 293, 117, 293, 87, 318, 142, 318, 178,
                        283, 168, 263, 142, 258, 183, 263, 173, 288, 218, 288, 193, 288, 163, 293, 127, 273, 163, 273, 163, 273, 163, 273, 168, 273, 168,
                        263, 163, 263, 163, 263, 168, 268, 168, 268, 168, 268, 375, 263, 370, 303, 370, 313, 370, 283, 102, 293, 102, 278, 107, 308, 107, 268, 163, 273, 163});
        joints2d_arr.push_back({287, 229, 272, 229, 277, 295, 277, 350, 303, 234, 303, 295, 303, 350, 293, 178, 293, 133, 293, 118, 293, 88, 323, 143, 318, 178,
                        282, 163, 262, 143, 257, 184, 272, 178, 287, 219, 293, 189, 293, 163, 293, 128, 272, 168, 272, 173, 272, 173, 272, 173, 272, 173,
                        262, 163, 262, 163, 262, 168, 267, 168, 267, 168, 267, 375, 262, 370, 308, 375, 313, 370, 282, 103, 298, 103, 277, 108, 308, 108, 272, 173, 272, 163});
        joints2d_arr.push_back({288, 229, 273, 229, 273, 295, 278, 350, 303, 234, 303, 295, 303, 350, 288, 178, 293, 133, 293, 118, 293, 83, 318, 143, 318, 178,
                        283, 163, 263, 143, 253, 184, 288, 189, 288, 219, 293, 189, 293, 163, 293, 128, 273, 168, 273, 173, 273, 173, 273, 173, 273, 173,
                        268, 163, 263, 163, 263, 168, 268, 168, 268, 168, 268, 375, 263, 370, 303, 370, 313, 370, 283, 103, 298, 103, 278, 108, 308, 108, 273, 173, 273, 163});
        joints2d_arr.push_back({288, 234, 273, 234, 273, 294, 278, 350, 303, 234, 303, 294, 303, 350, 288, 178, 293, 132, 293, 117, 293, 87, 323, 142, 318, 178,
                        283, 173, 263, 142, 258, 183, 288, 188, 288, 218, 288, 188, 293, 163, 293, 127, 273, 173, 273, 173, 278, 173, 278, 173, 278, 173,
                        268, 163, 268, 163, 268, 168, 268, 168, 273, 173, 268, 375, 263, 370, 303, 375, 313, 370, 283, 102, 293, 102, 278, 107, 303, 107, 273, 178, 278, 163});
        joints2d_arr.push_back({288, 234, 273, 234, 273, 294, 278, 350, 303, 234, 303, 294, 303, 350, 288, 178, 293, 132, 293, 117, 293, 87, 323, 142, 318, 178,
                        283, 173, 263, 142, 258, 183, 288, 188, 288, 218, 293, 188, 293, 163, 293, 127, 268, 173, 318, 158, 278, 178, 278, 173, 278, 173,
                        268, 163, 268, 163, 268, 168, 268, 168, 273, 173, 268, 375, 263, 370, 303, 370, 313, 370, 283, 102, 293, 102, 278, 107, 308, 107, 273, 178, 278, 163});
        joints2d_arr.push_back({288, 234, 273, 234, 273, 294, 278, 350, 303, 234, 303, 294, 303, 350, 293, 178, 293, 132, 293, 117, 293, 87, 323, 142, 318, 178,
                        283, 173, 263, 142, 258, 178, 303, 178, 288, 218, 288, 188, 293, 163, 293, 127, 318, 163, 323, 158, 318, 163, 318, 168, 278, 183,
                        268, 163, 268, 168, 268, 168, 268, 173, 273, 173, 268, 375, 263, 370, 303, 375, 313, 370, 283, 102, 293, 102, 278, 107, 303, 107, 273, 183, 278, 168});
        joints2d_arr.push_back({288, 233, 273, 233, 273, 294, 278, 350, 303, 233, 303, 294, 303, 350, 293, 177, 293, 131, 293, 116, 293, 86, 323, 142, 318, 177,
                        283, 172, 263, 142, 258, 182, 298, 182, 288, 218, 293, 187, 293, 162, 293, 131, 318, 162, 323, 157, 318, 162, 318, 167, 318, 172,
                        268, 167, 268, 167, 268, 167, 268, 172, 273, 172, 268, 375, 263, 370, 303, 375, 313, 370, 283, 101, 293, 101, 278, 106, 303, 106, 313, 167, 273, 167});
    }

};

TEST_F(Pose3dDetectorTest, 01_pose3d_detect_person)
{
    auto fd = DetectorFactory::get().getDetector("pose3d_videopose3d_v1_npu", use_npu_delegate);
    EXPECT_TRUE(fd.get() != nullptr);
    EXPECT_EQ(fd->getModelName(), "FitTV_Pose3D.tflite");
    auto modelInfo = fd->getModelInfo();
    EXPECT_EQ(modelInfo.height, 27); // numElems
    EXPECT_EQ(modelInfo.width, 41); // mNumJointsIn
    EXPECT_EQ(modelInfo.channels, 2);

    std::shared_ptr<Descriptor> descriptor = std::make_shared<Pose3dDescriptor>();
    auto foundPose3ds = std::dynamic_pointer_cast<Pose3dDescriptor>(descriptor);

    std::vector<float> joints2d = { 290, 236,    275, 236,
                                    275, 290,    275, 350,
                                    305, 236,    305, 295,
                                    305, 350,    290, 181,
                                    290, 136,    290, 116,
                                    290, 81,     320, 146,
									330, 186,    305, 221,
                                    260, 146,    245, 186,
                                    280, 201,    290, 221,
                                    290, 186,    290, 166,
                                    290, 131,    300, 196,
                                    300, 201,    300, 201,
                                    300, 206,    295, 206,
                                    285, 231,    285, 236,
                                    285, 236,    290, 236,
					                295, 236,    270, 375,
					                265, 370,    305, 375,
				                    315, 370,    285, 101,
				                    295, 101,    275, 106,
				                    305, 106,    290, 196,
				                    295, 231
                                  };

    cv::Mat joints2d_mat(41, 2, CV_32F, joints2d.data());
    cv::Mat joints2d_matd;
    joints2d_mat.convertTo( joints2d_matd, CV_64F );

    std::cout << "Pose2D Result imageJoints[idx] " << joints2d_matd.at<double>(0,0) << std::endl;

    EXPECT_TRUE(fd->detect(joints2d_matd, descriptor) == aif::kAifOk);

    std::cout << foundPose3ds->toStr() << std::endl;
}

TEST_F(Pose3dDetectorTest, 02_pose3d_detect_person_video_test)
{
    test_arr_init();

    auto fd = DetectorFactory::get().getDetector("pose3d_videopose3d_v1_npu", use_npu_delegate);
    EXPECT_TRUE(fd.get() != nullptr);
    EXPECT_EQ(fd->getModelName(), "FitTV_Pose3D.tflite");
    auto modelInfo = fd->getModelInfo();
    EXPECT_EQ(modelInfo.height, 27); // numElems
    EXPECT_EQ(modelInfo.width, 41); // mNumJointsIn
    EXPECT_EQ(modelInfo.channels, 2);

    std::shared_ptr<Descriptor> descriptor = std::make_shared<Pose3dDescriptor>();
    auto foundPose3ds = std::dynamic_pointer_cast<Pose3dDescriptor>(descriptor);

    for (int i = 0; i < joints2d_arr.size(); i++) {
        cv::Mat joints2d_mat(41, 2, CV_32F, joints2d_arr[i].data());
        cv::Mat joints2d_matd;
        joints2d_mat.convertTo( joints2d_matd, CV_64F );

        std::cout << "Pose2D Result imageJoints[idx] " << joints2d_matd.at<double>(0,0) << std::endl;

        EXPECT_TRUE(fd->detect(joints2d_matd, descriptor) == aif::kAifOk);
    }

    // output to json file
    std::ofstream output_file("./output_16images.json");
    output_file << foundPose3ds->toStr() << std::endl;
    output_file.close();

}

